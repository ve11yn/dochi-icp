type UserProfile = 
 record {
   categories: vec Category;
   createdAt: Time;
   userId: UserId;
 };
type UserId = principal;
type UpdateAppointmentRequest = 
 record {
   category: opt text;
   completed: opt bool;
   endTime: opt text;
   id: AppointmentId;
   startTime: opt text;
   title: opt text;
 };
type Time = int;
type Result_1 = 
 variant {
   err: text;
   ok: text;
 };
type Result = 
 variant {
   err: text;
   ok: Appointment;
 };
type CreateAppointmentRequest = 
 record {
   category: text;
   date: text;
   endTime: text;
   startTime: text;
   title: text;
 };
type Category = 
 record {
   color: text;
   name: text;
   textColor: text;
 };
type AppointmentId = nat;
type Appointment = 
 record {
   category: text;
   color: text;
   completed: bool;
   createdAt: Time;
   date: text;
   endTime: text;
   id: AppointmentId;
   startTime: text;
   title: text;
   updatedAt: Time;
   userId: UserId;
 };
service : {
  addCategory: (userId: UserId, category: Category) -> (Result_1);
  createAppointment: (userId: UserId, request: CreateAppointmentRequest) ->
   (Result);
  deleteAppointment: (userId: UserId, appointmentId: AppointmentId) ->
   (Result_1);
  deleteCategory: (userId: UserId, categoryName: text) -> (Result_1);
  getAllAppointments: (userId: UserId) -> (vec Appointment) query;
  getAppointmentsByDate: (userId: UserId, date: text) ->
   (vec Appointment) query;
  getAppointmentsByDateRange: (userId: UserId, startDate: text, endDate:
   text) -> (vec Appointment) query;
  getAppointmentsGroupedByDate: (userId: UserId) ->
   (vec record {
          text;
          vec Appointment;
        }) query;
  getUserProfile: (userId: UserId) -> (UserProfile) query;
  toggleAppointmentCompletion: (userId: UserId, appointmentId:
   AppointmentId) -> (Result);
  updateAppointment: (userId: UserId, request: UpdateAppointmentRequest) ->
   (Result);
}
